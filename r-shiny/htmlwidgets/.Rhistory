HTMLWidgets.staticRender();
}'))
) %>%
spk_add_deps()
datatable(resume, escape = FALSE,
options = list(fnDrawCallback = htmlwidgets::JS('function(){
HTMLWidgets.staticRender();
}'))
) %>%
spk_add_deps()
dfO <- data.frame(Type = c("A", "B", "C"),
Value_1 = c("1,1,2,2", "2,2,3,3", "3,3,4,4"),
Value_2 = c("0,1,2,3", "2,3,4,5", "4,5,6,7"))
library(tidyr)
library(dplyr)
df <- dfO %>%
separate_rows(Value_1, Value_2) %>%
mutate_at(vars(starts_with('Value')) ,funs(as.integer))
df %>%
group_by(Type) %>%
summarize(l1 = spk_chr(Value_1,
lineColor = 'black',
fillColor = '#ccc',
chartRangeMin = 0,
chartRangeMax = 8,
width = 80,
height = 60,
highlightLineColor = 'orange',
highlightSpotColor = 'orange'),
l2 = spk_chr(Value_2,
lineColor = 'black',
fillColor = '#ccc',
chartRangeMin = 0,
chartRangeMax = 8,
width = 80,
height = 60,
highlightLineColor = 'orange',
highlightSpotColor = 'orange')) %>%
datatable(escape = F,
rownames = F,
options = list(fnDrawCallback = htmlwidgets::JS('function(){
HTMLWidgets.staticRender();
}'))
) %>%
spk_add_deps()
df
txhousing %>%
group_by(city) %>%
summarise(test = spk_chr(mois)) %>%
datatable(escape = F,
rownames = F,
options = list(fnDrawCallback = htmlwidgets::JS('function(){
HTMLWidgets.staticRender();
}'))
) %>%
spk_add_deps()
txhousing %>%
group_by(city) %>%
summarise(test = spk_chr(month)) %>%
datatable(escape = F,
rownames = F,
options = list(fnDrawCallback = htmlwidgets::JS('function(){
HTMLWidgets.staticRender();
}'))
) %>%
spk_add_deps()
txhousing %>%
group_by(city) %>%
summarise(test = spk_chr(volume)) %>%
datatable(escape = F,
rownames = F,
options = list(fnDrawCallback = htmlwidgets::JS('function(){
HTMLWidgets.staticRender();
}'))
) %>%
spk_add_deps()
txhousing %>%
group_by(city) %>%
summarise("Volume evolution" = spk_chr(volume)) %>%
datatable(escape = F,
rownames = F,
options = list(fnDrawCallback = htmlwidgets::JS('function(){
HTMLWidgets.staticRender();
}'))
) %>%
spk_add_deps()
resume = txhousing %>%
group_by(city) %>%
summarise(volume = sum(volume, na.rm = T),
median = median(median, na.rm = T),
volume_valeurs = spk_chr(volume),
median_valeurs = spk_chr(median))
datatable(
resume,
escape = F,
rownames = F,
options = list(
fnDrawCallback = htmlwidgets::JS('function(){ HTMLWidgets.staticRender(); }'))
) %>%
spk_add_deps()
resume = txhousing %>%
group_by(city) %>%
summarise(
volume_valeurs = spk_chr(volume),
median_valeurs = spk_chr(median))
datatable(
resume,
escape = F,
rownames = F,
options = list(
fnDrawCallback = htmlwidgets::JS('function(){ HTMLWidgets.staticRender(); }'))
) %>%
spk_add_deps()
resume1 = txhousing %>%
group_by(city) %>%
summarise(
volume_valeurs = spk_chr(volume),
median_valeurs = spk_chr(median))
resume2 = txhousing %>%
group_by(city) %>%
summarise(test = mean(volume, na.rm = T))
datatable(
resume1, escape = F, rownames = F,
options = list(fnDrawCallback = htmlwidgets::JS('function(){HTMLWidgets.staticRender();}'))
) %>%
spk_add_deps()
datatable(
resume2
)
datatable(
resume2, rownames = FALSE
)
datatable(
resume2, rownames = FALSE
) %>%
spk_add_deps()
datatable(
resume1, escape = F, rownames = F,
options = list(fnDrawCallback = htmlwidgets::JS('function(){HTMLWidgets.staticRender();}'))
) %>%
inner_join(datatable(
resume2, rownames = FALSE
)) %>%
spk_add_deps()
datatable(
resume1, escape = F, rownames = F,
options = list(fnDrawCallback = htmlwidgets::JS('function(){HTMLWidgets.staticRender();}'))
) %>%
inner_join(datatable(
resume2, rownames = FALSE
)) %>%
spk_add_deps()
datatable(
resume1, escape = F, rownames = F,
options = list(fnDrawCallback = htmlwidgets::JS('function(){HTMLWidgets.staticRender();}'))
) %>%
merge(datatable(
resume2, rownames = FALSE
)) %>%
spk_add_deps()
hist.A<-rnorm(100)
hist.B<-rnorm(100)
hist.C<-rnorm(100)
current.A<-rnorm(1)
current.B<-rnorm(1)
current.C<-rnorm(1)
#whisker should show full range of data
boxval.A<-paste(quantile(hist.A,probs=c(0,0.25,0.5,0.75,1)),collapse = ",")
boxval.B<-paste(quantile(hist.B,probs=c(0,0.25,0.5,0.75,1)),collapse = ",")
boxval.C<-paste(quantile(hist.C,probs=c(0,0.25,0.5,0.75,1)),collapse = ",")
data<-data.frame(Variable=c("A","B","C"),Current=c(current.A,current.B,current.C),boxplot=c(boxval.A,boxval.B,boxval.C))
data$boxWithTarget<-paste(data$boxplot,data$Current,Sep=",")
cd <- list(list(targets = 2, render = JS("function(data, type, full){ return '<span class=sparkSamples>' + data + '</span>' }")))
line_string <- "type: 'line', lineColor: 'black', fillColor: '#ccc', highlightLineColor: 'orange', highlightSpotColor: 'orange'"
box_string <- "type: 'box', raw:true, showOutliers:false,lineColor: 'black', whiskerColor: 'black', outlierFillColor: 'black', outlierLineColor: 'black', medianColor: 'black', boxFillColor: 'orange', boxLineColor: 'black'"
cb = JS("function (oSettings, json) {\n  $('.sparkSeries:not(:has(canvas))').sparkline('html', { ",
line_string, " });\n  $('.sparkSamples:not(:has(canvas))').sparkline('html', { ",
box_string, " });\n}")
d <- datatable(data.table(data), rownames = FALSE, options = list(columnDefs = cd,
fnDrawCallback = cb))
d$dependencies <- append(d$dependencies, htmlwidgets:::getDependency("sparkline"))
d
install.packages("data.table")
d <- datatable(data.table(data), rownames = FALSE, options = list(columnDefs = cd,
fnDrawCallback = cb))
library(data.table)
d <- datatable(data.table(data), rownames = FALSE, options = list(columnDefs = cd,
fnDrawCallback = cb))
d$dependencies <- append(d$dependencies, htmlwidgets:::getDependency("sparkline"))
d
cd <- list(list(targets = 2, render = JS("function(data, type, full){ return '<span class=sparkSamples>' + data + '</span>' }")))
line_string <- "type: 'line', lineColor: 'black', fillColor: '#ccc', highlightLineColor: 'orange', highlightSpotColor: 'orange'"
box_string <- "type: 'box', raw:true, showOutliers:false,lineColor: 'black', whiskerColor: 'black', outlierFillColor: 'black', outlierLineColor: 'black', medianColor: 'black', boxFillColor: 'orange', boxLineColor: 'black'"
d <- datatable(data.table(data), rownames = FALSE, options = list(columnDefs = cd,
fnDrawCallback = cb))
cb = JS("function (oSettings, json) {\n  $('.sparkSeries:not(:has(canvas))').sparkline('html', { ",
line_string, " });\n  $('.sparkSamples:not(:has(canvas))').sparkline('html', { ",
box_string, " });\n}")
d$dependencies <- append(d$dependencies, htmlwidgets:::getDependency("sparkline"))
d
df = txhousing %>% group_by(city) %>%
summarise(test = paste(volume, collapse = ","))
datatable(df, rownames = FALSE, options = list(columnDefs = colDefs1,
fnDrawCallback = cb_line)) %>%
append(d1$dependencies, htmlwidgets:::getDependency("sparkline"))
colDefs1 <- list(list(targets = 2, render = JS("function(data, type, full){ return '<span class=spark>' + data + '</span>' }")))
line_string <- "type: 'line', lineColor: 'black', fillColor: '#ccc', highlightLineColor: 'orange', highlightSpotColor: 'orange'"
cb_line = JS(paste0("function (oSettings, json) { $('.spark:not(:has(canvas))').sparkline('html', { ",
line_string, ", chartRangeMin: ", r[1], ", chartRangeMax: ", r[2], " }); }"),
collapse = "")
df = txhousing %>% group_by(city) %>%
summarise(test = paste(volume, collapse = ","))
datatable(df, rownames = FALSE, options = list(columnDefs = colDefs1,
fnDrawCallback = cb_line)) %>%
append(d1$dependencies, htmlwidgets:::getDependency("sparkline"))
r = range(txhousing$volume, na.rm = TRUE)
cb_line = JS(paste0("function (oSettings, json) { $('.spark:not(:has(canvas))').sparkline('html', { ",
line_string, ", chartRangeMin: ", r[1], ", chartRangeMax: ", r[2], " }); }"),
collapse = "")
df = txhousing %>% group_by(city) %>%
summarise(test = paste(volume, collapse = ","))
datatable(df, rownames = FALSE, options = list(columnDefs = colDefs1,
fnDrawCallback = cb_line)) %>%
append(d1$dependencies, htmlwidgets:::getDependency("sparkline"))
d1 = datatable(data.table(df), rownames = FALSE, options = list(columnDefs = colDefs1,
fnDrawCallback = cb_line))
d1$dependencies <- append(d1$dependencies, htmlwidgets:::getDependency("sparkline"))
d1
df
boxCell <- function(x){
lapply(x, function(xx){
as.character(as.tags(
sparkline(xx, type="box",
chartRangeMin = min(unlist(xx)),
chartRangeMax = max(unlist(xx)))
))
})
}
txhousing %>%
group_by(city) %>%
summarise(values = list(volume)) %>%
formattable(
formatters = list(
area(row = 2, col = 3) ~ boxCell
)
) %>%
formattable:::as.htmlwidget() %>%
tagList() %>%
attachDependencies(
htmlwidgets:::widget_dependencies("sparkline","sparkline")
) %>%
browsable()
library(formattable)
txhousing %>%
group_by(city) %>%
summarise(values = list(volume)) %>%
formattable(
formatters = list(
area(row = 2, col = 3) ~ boxCell
)
) %>%
formattable:::as.htmlwidget() %>%
tagList() %>%
attachDependencies(
htmlwidgets:::widget_dependencies("sparkline","sparkline")
) %>%
browsable()
txhousing %>%
group_by(city) %>%
summarise(values = list(volume)) %>%
formattable(
formatters = list(
area(col = 2) ~ boxCell
)
) %>%
formattable:::as.htmlwidget() %>%
tagList() %>%
attachDependencies(
htmlwidgets:::widget_dependencies("sparkline","sparkline")
) %>%
browsable()
??tagList
library(htmltools)
txhousing %>%
group_by(city) %>%
summarise(values = list(volume)) %>%
formattable(
formatters = list(
area(col = 2) ~ boxCell
)
) %>%
formattable:::as.htmlwidget() %>%
tagList() %>%
attachDependencies(
htmlwidgets:::widget_dependencies("sparkline","sparkline")
) %>%
browsable()
lineCell <- function(x){
lapply(x, function(xx){
as.character(as.tags(
sparkline(xx, type="line",
chartRangeMin = min(unlist(xx)),
chartRangeMax = max(unlist(xx)))
))
})
}
txhousing %>%
group_by(city) %>%
summarise("Median price" = list(median), "Volume" = list(volume)) %>%
formattable(
formatters = list(
area(col = 2) ~ boxCell,
area(col = 3) ~ lineCell
)
) %>%
formattable:::as.htmlwidget() %>%
tagList() %>%
attachDependencies(
htmlwidgets:::widget_dependencies("sparkline","sparkline")
) %>%
browsable()
txhousing %>%
group_by(city) %>%
summarise(Volume = sum(volume, na.rm = T),
Median = median(median, na.rm = T),
"Median price" = list(median),
"Volume evolution" = list(volume)) %>%
formattable(
formatters = list(
area(col = 4) ~ boxCell,
area(col = 5) ~ lineCell
)
) %>%
formattable:::as.htmlwidget() %>%
tagList() %>%
attachDependencies(
htmlwidgets:::widget_dependencies("sparkline","sparkline")
) %>%
browsable()
runApp('GitHub/alisonjollois.github.io/r-shiny/htmlwidgets/app-DT.R')
resume = txhousing %>%
group_by(city) %>%
summarise(Volume = sum(volume, na.rm = T),
Median = median(median, na.rm = T),
"Median price" = list(median),
"Volume evolution" = list(volume))
boxCell <- function(x){
lapply(x, function(xx){
as.character(as.tags(
sparkline(xx, type="box",
chartRangeMin = min(unlist(xx)),
chartRangeMax = max(unlist(xx)))
))
})
}
lineCell <- function(x){
lapply(x, function(xx){
as.character(as.tags(
sparkline(xx, type="line",
chartRangeMin = min(unlist(xx)),
chartRangeMax = max(unlist(xx)))
))
})
}
resume %>%
formattable(
formatters = list(
area(col = 4) ~ boxCell,
area(col = 5) ~ lineCell
)
) %>%
formattable:::as.htmlwidget() %>%
tagList() %>%
attachDependencies(
htmlwidgets:::widget_dependencies("sparkline","sparkline")
) %>%
browsable()
runApp('GitHub/alisonjollois.github.io/r-shiny/htmlwidgets/app-DT.R')
runApp('GitHub/alisonjollois.github.io/r-shiny/htmlwidgets/app-DT.R')
runApp('GitHub/alisonjollois.github.io/r-shiny/htmlwidgets/app-DT.R')
runApp('GitHub/alisonjollois.github.io/r-shiny/htmlwidgets/app-DT.R')
runApp('GitHub/alisonjollois.github.io/r-shiny/htmlwidgets/app-DT.R')
runApp('GitHub/alisonjollois.github.io/r-shiny/htmlwidgets/app-DT.R')
runApp('GitHub/alisonjollois.github.io/r-shiny/htmlwidgets/app-DT.R')
runApp('GitHub/alisonjollois.github.io/r-shiny/htmlwidgets/app-DT.R')
runApp("GitHub/alisonjollois.github.io/r-shiny/dashboard/app.R")
resume = txhousing %>%
group_by(date) %>%
summarise(volume =  sum(volume, na.rm = TRUE))
g = ggplot(resume, aes(date, volume)) +
geom_line() +
theme_minimal()
g
library(ggplot2)
library(plotly)
install.packages("plotly")
g
ggplotly(g)
library(plotly)
ggplotly(g)
library(leaflet)
install.packages("leaflet")
library(leaflet)
?leafletOutput
map = leaflet() %>%
addTiles() %>%
setView(lng = -103, lat = 30, zoom = 8)
map
leaflet() %>%
addTiles() %>%
setView(lng = -101, lat = 30, zoom = 6)
leaflet() %>%
addTiles() %>%
setView(lng = -101, lat = 30, zoom = 5)
leaflet(txgeo) %>%
addTiles()
txgeo = geojson_read("texas-city.geojson", what = "sp")
getwd()
setwd("GitHub/alisonjollois.github.io/r-shiny/")
txgeo = geojson_read("texas-city.geojson", what = "sp")
map = leaflet(txgeo) %>%
addTiles()
map
leaflet(txgeo) %>%
addTiles() %>%
addPolygons(stroke = FALSE, smoothFactor = 0.3, fillOpacity = 1)
leaflet(txgeo) %>%
addTiles() %>%
addPolygons(fillColor = "lightgray")
leaflet(txgeo) %>%
addTiles() %>%
addPolygons(fillColor = "lightgray", fillOpacity = .5, color = "red")
?addPolygons
leaflet(txgeo) %>%
addTiles() %>%
addPolygons(fillColor = "gray", fillOpacity = .5, color = "red", weight = 1)
runApp('htmlwidgets/app-DT.R')
runApp('htmlwidgets/app-DT.R')
txgeo@data$city = sub(", TX", "", txgeo@data$name)
leaflet(txgeo) %>%
addTiles() %>%
addPolygons(fillColor = "gray", fillOpacity = .5, color = "red", weight = 1)
class(us_cities)
class(txgeo)
txgeo@data
str(txgeo@data)
resume = txhousing %>%
group_by(city) %>%
summarise(volume = sum(volume, na.rm = TRUE))
resume
head(txgeo@data)
head(merge(txgeo@data, resume, all.x = TRUE))
pal <- colorNumeric("viridis", NULL)
txgeo@data = merge(txgeo@data, resume, all.x = TRUE)
leaflet(txgeo) %>%
addTiles() %>%
addPolygons(fillColor = ~pal(volume),
fillOpacity = .5,
color = "red", weight = 1)
leaflet(txgeo) %>%
addTiles() %>%
addPolygons(fillColor = ~pal(volume),
fillOpacity = .5,
color = "red", weight = 1) %>%
addLegend(pal = pal, values = ~volume, opacity = 1.0,
labFormat = labelFormat(transform = function(x) round(x)))
txgeo = geojson_read("texas-city.geojson", what = "sp")
txgeo = geojson_read("texas-city.geojson", what = "sp")
dir()
setwd("htmlwidgets/")
txgeo = geojson_read("texas-city.geojson", what = "sp")
head(join(txgeo@data, resume, all.x = TRUE))
head(left_join(txgeo@data, resume))
txgeo@data$city = sub(", TX", "", txgeo@data$name)
head(left_join(txgeo@data, resume))
txgeo@data = dplyr::left_join(txgeo@data, resume, all.x = TRUE)
leaflet(txgeo) %>%
addTiles() %>%
addPolygons(fillColor = ~pal(volume),
fillOpacity = .5,
color = "red", weight = 1) %>%
addLegend(pal = pal, values = ~volume, opacity = 1.0,
labFormat = labelFormat(transform = function(x) round(x)))
leaflet(txgeo) %>%
addTiles() %>%
addPolygons(fillColor = ~pal(volume),
fillOpacity = .5,
color = "red", weight = 1,
label = ~paste0(city, ": ", formatC(volume, big.mark = ","))) %>%
addLegend(pal = pal, values = ~volume, opacity = 1.0,
labFormat = labelFormat(transform = function(x) round(x)))
View(txhousing)
runApp('app-DT.R')
?geojsonio
class(txgeo)
?sp
subset(txgeo, name == "Houston, TX")
txgeo = subset(txgeo, sub(", TX", "", name) %in% unique(txhousing$city))
length(txgeo)
txgeo@data$city = sub(", TX", "", txgeo@data$name)
txgeo@data = dplyr::left_join(txgeo@data, resume, all.x = TRUE)
pal = colorNumeric("viridis", NULL)
map = leaflet(txgeo) %>%
addTiles() %>%
addPolygons(fillColor = ~pal(volume),
fillOpacity = .5,
color = "red", weight = 1,
label = ~paste0(city, ": ", formatC(volume, big.mark = ","))) %>%
addLegend(pal = pal, values = ~volume, opacity = 1.0,
labFormat = labelFormat(transform = function(x) round(x)))
map
runApp('app-DT.R')
